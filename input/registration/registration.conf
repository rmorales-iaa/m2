//-------------------------------------------------------------------------
Registration {
  //---------------------------------------------------------------------------
  //options:
  // 1: astroalign (python)
  // 2: invariant triangle (scala)
  // 3: closest source (scala)
  //algorithmSeq = [2,1,3]   //Try in order, and return the first one that succeeds
  algorithmSeq = [3,2,1]   //Try in order, and return the first one that succeeds
  //---------------------------------------------------------------------------
  minOverlappingPercentage    = 85
  //---------------------------------------------------------------------------
  //0 no interpolation
  //1 nearest pixel
  integralInterpolationType   = 0
  //---------------------------------------------------------------------------
  //used to get the affine translation (registration) between two images.
  //It is fastest that the algorithm implemented in m2 due to it uses sextractor as source detection algorithm but it is less precise
  //It dependes on python version 3.6 and the following python packages: astroalign and astropy
  algorithm {
    //-------------------------------------------------------------------------
    astroAlignPy {
      call           = "python3 input/astroalignPy/astroalignPy.py"
      temporalDir    = "output/astroalignPy_tmp/"  //used to manage subImages
    }
    //-------------------------------------------------------------------------
    invariantTriangle { //'INVARIANT_TRIANGLE'
      //-----------------------------------------------------------------------
      minAllowedImageSourceCount           = 3
      //-----------------------------------------------------------------------
      maxSourceCountConsidered             = 20
      //-----------------------------------------------------------------------
      searchCircleRadius                   = 0.2 //Circle raadius to search neigbours in the KDTreee. Empirical value from astroalign
      //-----------------------------------------------------------------------
      ransac {
        //----------------------------------------------------------------------
        minAllowedMatches                  = 20  //min matches to validate the model

        maxIterations                      = 200
        maxAllowedPixDistanceTolerance     = 2 //The pixel distance tolerance to assume two invariant points are the same

        minMatchPercentageToValidateModel  = 45  //min percentage of compatible vertex to validate model
        maxMatchPercentageToValidateModel  = 99  //min percentage of compatible vertex to validate model

        percentageStepToValidateModel      = 1   //percentage step from 'maxPercentage' to 'minPercentage'
        //---------------------------------------------------------------------
      }
      //-----------------------------------------------------------------------
      asterismPolygonSideCount             = 3  //triangles!
      //-----------------------------------------------------------------------
    }
    //-------------------------------------------------------------------------
    closestSource {
      //-----------------------------------------------------------------------
      maxAllowedPixDistanceMatch = 3
      useResidualMedianForAFT    = 1  //if 0, use a standard algorithm for calculating aft like "umenaya"
                                      //if 1, use median of the residuals to calculate the aft only with translation

      residualMedianSigmaClipping= 2.5
      //-----------------------------------------------------------------------
    }
    //-------------------------------------------------------------------------
  }
  //---------------------------------------------------------------------------
}
//-----------------------------------------------------------------------------